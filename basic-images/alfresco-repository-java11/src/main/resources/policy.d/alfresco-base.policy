// any permissions relevant for most Alfresco versions
grant codeBase "file:\${catalina.base}/webapps/alfresco/-" {
    // common / legacy transformers
    permission java.io.FilePermission "/usr/bin/*", "read,execute";
    permission java.io.FilePermission "/usr/local/bin/*", "read,execute";
    // OfficeUtils.findOfficeHome checks various common paths to find soffice
    permission java.io.FilePermission "/sbin/soffice", "read,execute";
    permission java.io.FilePermission "/bin/soffice", "read,execute";
    permission java.io.FilePermission "/usr/lib/openoffice", "read";
    permission java.io.FilePermission "/usr/lib/openoffice/-", "read,execute";
    permission java.io.FilePermission "/usr/lib/libreoffice", "read";
    permission java.io.FilePermission "/usr/lib/libreoffice/-", "read,execute";
    permission java.io.FilePermission "/usr/lib64/libreoffice", "read";
    permission java.io.FilePermission "/usr/lib64/libreoffice/-", "read,execute";
    permission java.io.FilePermission "/opt/libreoffice", "read";
    permission java.io.FilePermission "/opt/libreoffice/-", "read,execute";
    permission java.io.FilePermission "/opt/openoffice.org3", "read";
    permission java.io.FilePermission "/opt/openoffice.org3/-", "read,execute";
    permission java.io.FilePermission "/var/lib/ImageMagick/-", "read,execute";

    // default lookup in library (could be changed via -Dorg.quartz.properties=)
    permission java.io.FilePermission "quartz.properties", "read";

    // ImporterBootstrap tries file lookup (unlikely match) before checking for classpath (most common case)
    // don't want to allow everything, so restrict to alfresco/* paths
    permission java.io.FilePermission "alfresco/-", "read";
    // any config lookup may use file-based lookup instead of classpath
    permission java.io.FilePermission "shared/classes/alfresco/-", "read";

    // soo many libraries need to use reflection
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    permission java.lang.RuntimePermission "accessClassInPackage.*";
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    // Rhino script engine creates a classloader for dynamically compiled scripts
    permission java.lang.RuntimePermission "createClassLoader";
    // cglib dynamically defines classes
    permission java.lang.RuntimePermission "defineClass";
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.RuntimePermission "getProtectionDomain";
    permission java.lang.RuntimePermission "getStackWalkerWithClassReference";
    // any library may check an env setting
    permission java.lang.RuntimePermission "getenv.*";
    permission java.lang.RuntimePermission "modifyThread";
    permission java.lang.RuntimePermission "setContextClassLoader";
    permission java.lang.RuntimePermission "shutdownHooks";

    permission java.net.NetPermission "specifyStreamHandler";
    permission java.net.SocketPermission "*", "connect";
    // looks like this is used for dynamic client ports in Apache HTTP Client connections
    permission java.net.SocketPermission "localhost:0", "listen,resolve";

    permission java.security.SecurityPermission "insertProvider.*";
    permission java.security.SecurityPermission "putProviderProperty.*";

    // read,write required due to DescriptorStartupLog (excessive - should be patched/removed to limit to read-only)
    permission java.util.PropertyPermission "*", "read,write";

    // write required due to RuntimeSystemPropertiesSetter (should be removed in Community as useless)
    permission java.util.PropertyPermission "alfresco.jmx.dir", "write";

    // Apache Camel (used for ActiveMQ) may want to create an mbean server if no existing is found
    // also necessary for any Alfresco JMX beans
    permission javax.management.MBeanServerPermission "createMBeanServer";
    permission javax.management.MBeanServerPermission "findMBeanServer";
    permission javax.management.MBeanPermission "org.alfresco.*#-[*:*]", "registerMBean";
    permission javax.management.MBeanPermission "org.alfresco.*#-[*:*]", "unregisterMBean";
    permission javax.management.MBeanPermission "org.alfresco.*#-[*:*]", "invoke";

    // custom Apache ibats/Commons OGNL
    // not sure if all are needed, but those packages are used in ibatis configs
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.java.lang.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.java.util.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.activiti.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.alfresco.ibatis.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.alfresco.repo.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.alfresco.util.*";
};

// limited privileges for dropped in JAR extension modules
grant codeBase "file:/srv/alfresco/modules/-" {
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    permission java.lang.RuntimePermission "accessClassInPackage.*";
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.net.SocketPermission "*", "connect";

    permission java.util.PropertyPermission "*", "read";
};
