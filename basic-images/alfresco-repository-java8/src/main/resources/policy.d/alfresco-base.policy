// any permissions relevant for most Alfresco versions
grant codeBase "file:\${catalina.base}/webapps/alfresco/-" {

    // template loader looks up from server root somehow
    permission java.io.FilePermission "\${catalina.base}", "read";
    permission java.io.FilePermission "\${catalina.base}/logs", "read";
    permission java.io.FilePermission "\${catalina.base}/logs/*", "read,write";

    permission java.io.FilePermission "\${java.io.tmpdir}", "read";
    permission java.io.FilePermission "\${java.io.tmpdir}/-", "read,write,delete";

    // common / legacy transformers
    permission java.io.FilePermission "/usr/bin/*", "read,execute";
    permission java.io.FilePermission "/usr/local/bin/*", "read,execute";
    // OfficeUtils.findOfficeHome checks various common paths to find soffice
    permission java.io.FilePermission "/usr/sbin/soffice", "read,execute";
    permission java.io.FilePermission "/sbin/soffice", "read,execute";
    permission java.io.FilePermission "/bin/soffice", "read,execute";
    permission java.io.FilePermission "/usr/lib/openoffice", "read";
    permission java.io.FilePermission "/usr/lib/openoffice/-", "read,execute";
    permission java.io.FilePermission "/usr/lib/libreoffice", "read";
    permission java.io.FilePermission "/usr/lib/libreoffice/-", "read,execute";
    permission java.io.FilePermission "/usr/lib64/libreoffice", "read";
    permission java.io.FilePermission "/usr/lib64/libreoffice/-", "read,execute";
    permission java.io.FilePermission "/opt/libreoffice", "read";
    permission java.io.FilePermission "/opt/libreoffice/-", "read,execute";
    permission java.io.FilePermission "/opt/openoffice.org3", "read";
    permission java.io.FilePermission "/opt/openoffice.org3/-", "read,execute";
    permission java.io.FilePermission "/var/lib/ImageMagick/-", "read,execute";
    // Apache PDFBox NativeFontDirFinder via UnixFontDirFinder
    permission java.io.FilePermission "\${user.home}/.fonts", "read";
    permission java.io.FilePermission "\${user.home}/.fonts/-", "read";
    // technically possible but property never set - here purely for documentation
    // permission java.io.FilePermission "\${pdfbox.fontcache}/.pdfbox.cache", "read,write";
    permission java.io.FilePermission "\${user.home}/.pdfbox.cache", "read,write";
    // never relevant as user.home (always set) wins over java.io.tmpdir
    permission java.io.FilePermission "\${java.io.tmpdir}/.pdfbox.cache", "read,write";
    permission java.io.FilePermission "/usr/local/fonts", "read";
    permission java.io.FilePermission "/usr/local/fonts/-", "read";
    permission java.io.FilePermission "/usr/local/share/fonts", "read";
    permission java.io.FilePermission "/usr/local/share/fonts/-", "read";
    permission java.io.FilePermission "/usr/share/fonts", "read";
    permission java.io.FilePermission "/usr/share/fonts/-", "read";
    permission java.io.FilePermission "/usr/X11R6/lib/X11/fonts", "read";
    permission java.io.FilePermission "/usr/X11R6/lib/X11/fonts/-", "read";

    // default lookup in library (could be changed via -Dorg.quartz.properties=)
    permission java.io.FilePermission "quartz.properties", "read";

    permission java.io.FilePermission "cxf.xml", "read";
    permission java.io.FilePermission "\${java.home}/lib/wsdl.properties", "read";

    // default lookup in library (could be changed via -Dspy.properties=)
    permission java.io.FilePermission "spy.properties", "read";

    // For a fallback in org.alfresco.xmlfactory.FactoryHelper#getConfiguration
    // unlike the straight property read just lines before, there is no catch for SecurityException
    permission java.io.FilePermission "\${java.home}/lib/javax.xml.parsers.SAXParserFactory.properties", "read";
    permission java.io.FilePermission "\${java.home}/lib/javax.xml.parsers.DocumentBuilderFactory.properties", "read";
    // Xerces + Xalan lib can live with that, but also no issue allowing this (makes security debugging easier due to less clutter as it's used extensively via Spring)
    permission java.io.FilePermission "\${java.home}/lib/xerces.properties", "read";
    permission java.io.FilePermission "\${java.home}/lib/xalan.properties", "read";

    // javax.activation.MimetypesFileTypeMap
    permission java.io.FilePermission "\${java.home}/conf", "read";
    permission java.io.FilePermission "\${java.home}/conf/mime.types", "read";
    permission java.io.FilePermission "\${java.home}/lib/mime.types", "read";
    permission java.io.FilePermission "\${user.home}/.mime.types", "read";

    // in older Alfresco version WSServletContextListener looks this up
    permission java.io.FilePermission "\${catalina.base}//basename", "read";
    permission java.io.FilePermission "\${catalina.base}//xcatalog", "read";
    // Activiti ExpressionFactoryImpl does not cache SecurityException
    // only checks -Djavax.el.ExpressionFactory as fallback
    permission java.io.FilePermission "\${java.home}/lib/el.properties", "read";

    // ImporterBootstrap tries file lookup (unlikely match) before checking for classpath (most common case)
    // don't want to allow everything, so restrict to alfresco/* paths
    permission java.io.FilePermission "alfresco/-", "read";
    // any config lookup may use file-based lookup instead of classpath
    permission java.io.FilePermission "shared/classes/alfresco/-", "read";

    // soo many libraries need to use reflection
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    permission java.lang.RuntimePermission "accessClassInPackage.*";
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    // Rhino script engine creates a classloader for dynamically compiled scripts
    permission java.lang.RuntimePermission "createClassLoader";
    // cglib dynamically defines classes
    permission java.lang.RuntimePermission "defineClass";
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.RuntimePermission "getProtectionDomain";
    permission java.lang.RuntimePermission "getStackTrace";
    permission java.lang.RuntimePermission "reflectionFactoryAccess";
    // any library may check an env setting
    permission java.lang.RuntimePermission "getenv.*";
    permission java.lang.RuntimePermission "modifyThread";
    permission java.lang.RuntimePermission "setContextClassLoader";
    permission java.lang.RuntimePermission "setFactory";
    permission java.lang.RuntimePermission "shutdownHooks";

    permission java.net.NetPermission "specifyStreamHandler";
    permission java.net.SocketPermission "*", "connect";
    // looks like this is used for dynamic client ports in Apache HTTP Client connections
    permission java.net.SocketPermission "localhost:0", "listen,resolve";

    permission java.security.SecurityPermission "insertProvider";
    permission java.security.SecurityPermission "insertProvider.*";
    permission java.security.SecurityPermission "putProviderProperty.*";
    permission java.security.SecurityPermission "getProperty.org.bouncycastle.*";

    // read,write required due to DescriptorStartupLog (excessive - should be patched/removed to limit to read-only)
    permission java.util.PropertyPermission "*", "read,write";

    // write required due to RuntimeSystemPropertiesSetter (should be removed in Community as useless)
    permission java.util.PropertyPermission "alfresco.jmx.dir", "write";

    // Apache Camel (used for ActiveMQ) may want to create an mbean server if no existing is found
    // also necessary for any Alfresco JMX beans
    permission javax.management.MBeanServerPermission "createMBeanServer,findMBeanServer";
    permission javax.management.MBeanPermission "org.alfresco.*#-[*:*]", "*";
    permission javax.management.MBeanPermission "org.apache.camel.*#-[*:*]", "*";
    // via Camel DefaultManagementMBeanAssembler
    permission javax.management.MBeanPermission "javax.management.modelmbean.RequiredModelMBean#-[-]", "instantiate";
    // in older Alfresco version WSServletContextListener deals with com.sun.xml.ws.* mbeans
    permission javax.management.MBeanPermission "com.sun.xml.ws.*#-[*:*]", "registerMBean";
    permission javax.management.MBeanPermission "com.sun.xml.ws.*#-[*:*]", "unregisterMBean";
    permission javax.management.MBeanPermission "com.sun.xml.ws.*#-[*:*]", "invoke";
    // X509ServletFilterBase queries all if it cannot find Catalina Engine with direct access
    permission javax.management.MBeanPermission "org.apache.catalina.mbeans.*#-[-]", "queryNames,getAttribute";
    permission javax.management.MBeanPermission "org.apache.tomcat.util.modeler.BaseModelMBean#-[-]", "queryNames,getAttribute";

    permission javax.management.MBeanTrustPermission "register";

    // Apache CXF
    permission javax.security.auth.AuthPermission "getPolicy";

    // duplicated from p6spy as it is checked against Spring due to its use of doPrivileged
    permission javax.management.MBeanPermission "-#-[-]", "queryNames";
    permission javax.management.MBeanPermission "com.p6spy.engine.*#-[*:*]", "*";

    // custom Apache ibats/Commons OGNL
    // not sure if all are needed, but those packages are used in ibatis configs
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.java.lang.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.java.util.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.activiti.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.alfresco.ibatis.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.alfresco.repo.*";
    permission org.apache.ibatis.ognl.OgnlInvokePermission  "invoke.org.alfresco.util.*";

    // CmisWebServicesServlet
    permission javax.xml.ws.WebServicePermission "publishEndpoint";
};